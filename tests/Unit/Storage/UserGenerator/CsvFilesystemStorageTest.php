<?php

namespace OAT\SimpleRoster\Tests\Unit\Storage\UserGenerator;

use OAT\SimpleRoster\Csv\CsvWriter;
use OAT\SimpleRoster\Entity\Assignment;
use OAT\SimpleRoster\Entity\LineItem;
use OAT\SimpleRoster\Entity\User;
use OAT\SimpleRoster\Lti\Model\AutogeneratedUser;
use OAT\SimpleRoster\Model\AssignmentCollection;
use OAT\SimpleRoster\Storage\UserGenerator\CsvFilesystemStorage;
use PHPUnit\Framework\TestCase;

class CsvFilesystemStorageTest extends TestCase
{
    private string $dir = 's1';
    private string $path = 's2/';
    private string $key = 's3';

    public function testPersistAssignments(): void
    {
        $mock = $this->createMock(CsvWriter::class);
        $mock->expects($this->once())
            ->method('writeCsv')
            ->with($this->key(), $this->anything(), $this->makeAssignmentsArray());

        $obj = new CsvFilesystemStorage($mock, $this->dir, $this->path);

        $obj->persistAssignments($this->key, $this->makeAssignments());
    }

    public function testPersistUsers(): void
    {
        $mock = $this->createMock(CsvWriter::class);
        $mock->expects($this->once())
            ->method('writeCsv')
            ->with($this->key(), $this->anything(), $this->makeUsersArray());

        $obj = new CsvFilesystemStorage($mock, $this->dir, $this->path);

        $obj->persistUsers($this->key, $this->makeUsers());
    }

    protected function key(): string
    {
        return $this->dir . '/' . $this->path . $this->key;
    }

    /**
     * @return AutogeneratedUser[]
     */
    protected function makeUsers(): array
    {
        return [
            new AutogeneratedUser('n1', 'p1', 'g1'),
            new AutogeneratedUser('n2', 'p2', 'g2'),
            new AutogeneratedUser('n3', 'p3', 'g3')
        ];
    }

    /**
     * @return string[][]
     */
    protected function makeUsersArray(): array
    {
        return [
            ['n1', 'p1', 'g1'],
            ['n2', 'p2', 'g2'],
            ['n3', 'p3', 'g3']
        ];
    }

    protected function makeAssignments(): AssignmentCollection
    {
        $u = new User();
        $u->setUsername('n1');

        $li = new LineItem();
        $li->setSlug('s1');

        $a = new Assignment();
        $a->setUser($u);
        $a->setLineItem($li);

        return new AssignmentCollection([$a]);
    }

    protected function makeAssignmentsArray(): array
    {
        return [['n1', 's1']];
    }
}
