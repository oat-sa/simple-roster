<?php

/**
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; under version 2
 *  of the License (non-upgradable).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 *  Copyright (c) 2022 (original work) Open Assessment Technologies S.A.
 */

declare(strict_types=1);

namespace OAT\SimpleRoster\Lti\Service\UserGenerator;

use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use OAT\SimpleRoster\Lti\Model\AutogeneratedUser;
use OAT\SimpleRoster\Model\AssignmentCollection;
use OAT\SimpleRoster\Model\UserCollection;
use OAT\SimpleRoster\Repository\AssignmentRepository;
use OAT\SimpleRoster\Repository\Criteria\FindUserCriteria;
use OAT\SimpleRoster\Repository\UserRepository;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserGeneratorDatabaseStorage implements UserGeneratorStateStorageInterface
{
    private AssignmentRepository $assignmentRepository;
    private UserRepository $userRepository;
    private UserPasswordHasherInterface $hasher;

    public function __construct(
        AssignmentRepository $assignmentRepository,
        UserRepository $userRepository,
        UserPasswordHasherInterface $hasher
    ) {
        $this->assignmentRepository = $assignmentRepository;
        $this->userRepository = $userRepository;
        $this->hasher = $hasher;
    }

    /**
     * @param AutogeneratedUser[] $users
     *
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function persistUsers(iterable $users): UserCollection
    {
        $usernames = [];
        foreach ($users as $user) {
            $this->userRepository->persist($user->toEntity($this->hasher));
            $usernames[] = $user->getName();
        }

        $this->userRepository->flush();

        return $this->userRepository->findAllByCriteria(
            (new FindUserCriteria())->addUsernameCriterion(...$usernames)
        );
    }

    public function persistAssignment(AssignmentCollection $assignments): void
    {
        foreach ($assignments as $assignment) {
            $this->assignmentRepository->persist($assignment);
        }

        $this->assignmentRepository->flush();
    }
}
