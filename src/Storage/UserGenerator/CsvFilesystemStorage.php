<?php

/*
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; under version 2
 *  of the License (non-upgradable).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 *  Copyright (c) 2022 (original work) Open Assessment Technologies S.A.
 */

declare(strict_types=1);

namespace OAT\SimpleRoster\Storage\UserGenerator;

use OAT\SimpleRoster\Csv\CsvWriter;
use OAT\SimpleRoster\Entity\Assignment;
use OAT\SimpleRoster\Lti\Model\AutogeneratedUser;
use OAT\SimpleRoster\Model\AssignmentCollection;

class CsvFilesystemStorage implements StorageInterface
{
    protected const USER_CSV_HEAD = ['username', 'password', 'groupId'];
    protected const ASSIGNMENT_CSV_HEAD = ['username', 'lineItemSlug'];

    protected CsvWriter $csvWriter;
    protected string $projectDir;
    protected string $generatedUsersFilePath;

    public function __construct(CsvWriter $csvWriter, string $projectDir, string $generatedUsersFilePath)
    {
        $this->csvWriter = $csvWriter;
        $this->projectDir = $projectDir;
        $this->generatedUsersFilePath = $generatedUsersFilePath;
    }

    /**
     * @inheritdoc
     */
    public function persistUsers(string $key, array $data): void
    {
        $this->csvWriter->writeCsv(
            $this->getPath($key),
            self::USER_CSV_HEAD,
            $this->castUsers($data)
        );
    }

    /**
     * @inheritdoc
     */
    public function persistAssignments(string $key, AssignmentCollection $data): void
    {
        $this->csvWriter->writeCsv(
            $this->getPath($key),
            self::ASSIGNMENT_CSV_HEAD,
            $this->castAssignments($data)
        );
    }

    protected function getPath(string $key): string
    {
        return sprintf('%s/%s%s', $this->projectDir, $this->generatedUsersFilePath, ltrim($key, '/'));
    }

    /**
     * @param AutogeneratedUser[] $users
     * @return string[][]
     */
    protected function castUsers(array $users): array
    {
        $res = [];
        foreach ($users as $user) {
            $res[] = [$user->getName(), $user->getPassword(), $user->getGroup()];
        }

        return $res;
    }

    /**
     * @return string[][]
     */
    protected function castAssignments(AssignmentCollection $assignments): array
    {
        $res = [];
        foreach ($assignments as $assignment) {
            /** @var Assignment $assignment */
            $res[] = [$assignment->getUser()->getUsername(), $assignment->getLineItem()->getSlug()];
        }

        return $res;
    }
}