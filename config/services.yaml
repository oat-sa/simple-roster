parameters:
    locale: 'en'
    app.route_prefix: '%env(resolve:APP_ROUTE_PREFIX)%'

services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false
        bind:
            $debug: '%env(resolve:APP_DEBUG)%'
            $ltiInstances: '%ltiInstances%'
            $ltiLaunchPresentationReturnUrl: '%env(resolve:LTI_LAUNCH_PRESENTATION_RETURN_URL)%'
            $ltiLaunchPresentationLocale: '%env(resolve:LTI_LAUNCH_PRESENTATION_LOCALE)%'
            $ltiInstancesLoadBalancerEnabled: '%env(bool:LTI_ENABLE_INSTANCES_LOAD_BALANCER)%'
            $appApiKey: '%env(resolve:APP_API_KEY)%'

    _instanceof:
        App\Ingester\Ingester\IngesterInterface:
            tags: ['app.ingester']
        App\Ingester\Source\IngesterSourceInterface:
            tags: ['app.ingester_source']
        App\EventListener\Doctrine\EntityListenerInterface:
            tags: ['doctrine.orm.entity_listener']

    app.session_storage.connection:
        class: Redis
        calls:
            - method: connect
              arguments:
                  - '%env(resolve:REDIS_SESSION_CACHE_HOST)%'
                  - '%env(int:REDIS_SESSION_CACHE_PORT)%'

    app.doctrine_cache.connection:
        class: Redis
        calls:
            - method: connect
              arguments:
                  - '%env(resolve:REDIS_DOCTRINE_CACHE_HOST)%'
                  - '%env(int:REDIS_DOCTRINE_CACHE_PORT)%'

    app.doctrine_cache.provider:
        class: Doctrine\Common\Cache\RedisCache
        calls:
            - method: setRedis
              arguments:
                  - '@app.doctrine_cache.connection'

    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Model,Migrations,Tests,Kernel.php}'

    App\Action\:
        resource: '../src/Action'
        tags: ['controller.service_arguments']

    App\Repository\UserRepository:
        arguments:
            $userCacheTtl: '%env(REDIS_DOCTRINE_USER_CACHE_TTL)%'

    App\Ingester\Registry\IngesterRegistry:
        arguments: [!tagged 'app.ingester']

    App\Ingester\Registry\IngesterSourceRegistry:
        arguments: [!tagged 'app.ingester_source']

    App\Ingester\Source\S3CsvIngesterSource:
        arguments:
            $client: '@aws.s3'
            $bucket: '%env(AWS_S3_INGEST_BUCKET)%'

    App\EventSubscriber\UserCacheInvalidationSubscriber:
        tags: ['doctrine.event_subscriber']

    App\Command\GarbageCollector\AssignmentGarbageCollectorCommand:
        arguments:
            $cleanUpInterval: '%env(ASSIGNMENT_STATE_INTERVAL_THRESHOLD)%'

    App\Command\Cache\DoctrineResultCacheWarmerCommand:
        arguments:
            $doctrineConfiguration: '@doctrine.orm.default_configuration'

    App\Logger\UserRequestSessionLogProcessor:
        tags:
            - { name: 'monolog.processor', channel: 'request' }
            - { name: 'monolog.processor', channel: 'app' }
            - { name: 'monolog.processor', channel: 'security' }

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@app.session_storage.connection'

    Ramsey\Uuid\UuidFactoryInterface:
        class: Ramsey\Uuid\UuidFactory
