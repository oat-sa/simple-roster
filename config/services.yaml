# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
          # fetching services directly from the container via $container->get() won't work.
          # The best practice is to be explicit about your dependencies anyway.
        bind:
            $awsVersion: '%env(AWS_VERSION)%'
            $awsRegion: '%env(AWS_REGION)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Ingesting/Source,Ingesting/Exception,Model,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\S3\S3ClientInterface:
        class: App\S3\AmazonS3Client
        shared: false
        arguments:
            $client: '@aws.s3'

    Aws\DynamoDb\Marshaler:
        class: Aws\DynamoDb\Marshaler

    App\Storage\StorageInterface:
        class: App\Storage\DynamoDbStorage
        arguments:
            $dynamoDbClient: '@Aws\DynamoDb\DynamoDbClient'
            $marshaler: '@Aws\DynamoDb\Marshaler'

    App\Ingesting\Ingester\InfrastructuresIngester:
        class: App\Ingesting\Ingester\InfrastructuresIngester
        public: true

    App\Ingesting\Ingester\LineItemsIngester:
        class: App\Ingesting\Ingester\LineItemsIngester
        public: true

    App\Ingesting\Ingester\UserAndAssignmentsIngester:
        class: App\Ingesting\Ingester\UserAndAssignmentsIngester
        public: true

    Symfony\Component\Serializer\SerializerInterface:
        class: Symfony\Component\Serializer\Serializer
        arguments:
            $normalizers:
                - !service
                    class: App\Denormalizer\UserDenormalizer
                    calls:
                        -   method: setSerializer
                            arguments:
                                - '@Symfony\Component\Serializer\SerializerInterface'
                - !service
                    class: Symfony\Component\Serializer\Normalizer\PropertyNormalizer
                - !service
                    class: Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
            $encoders:
                - !service
                    class: App\Denormalizer\Encoder

    App\Security\LoginManagerInterface:
        class: App\Security\LoginManager

    Symfony\Component\Security\Guard\GuardAuthenticatorHandler:
        class: Symfony\Component\Security\Guard\GuardAuthenticatorHandler

    user_provider:
        class: App\Security\UserProvider
        public: true

    serializer.lti_request:
        class: Symfony\Component\Serializer\Serializer
        arguments:
            $normalizers:
                - !service
                    class: Symfony\Component\Serializer\Normalizer\PropertyNormalizer
                    arguments:
                        $classMetadataFactory: null
                        $nameConverter:
                            !service
                            class: Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter
            $encoders:
                - !service
                    class: App\Denormalizer\Encoder

    App\Lti\LaunchRequestBuilder:
        class: App\Lti\LaunchRequestBuilder
        calls:
            -   method: setSerializer
                arguments:
                    - '@serializer.lti_request'