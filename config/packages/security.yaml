security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        OAT\SimpleRoster\Entity\User:
            algorithm: auto
            memory_cost: 1024
            time_cost: 3
    providers:
        app_user_provider:
            id: OAT\SimpleRoster\Security\Provider\UserProvider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_key:
            anonymous: ~
            pattern: '^%app.route_prefix%/v1/bulk'
            guard:
                authenticators:
                    - OAT\SimpleRoster\Security\Authenticator\ApiKeyAuthenticator
            stateless: true

        lti1p3:
            pattern: '^%app.route_prefix%/v1/lti1p3/outcome'
            stateless: true
            lti1p3_service: { scopes: [ 'https://purl.imsglobal.org/spec/lti-bo/scope/basicoutcome' ] }

        api:
            anonymous: ~
            pattern: '^%app.route_prefix%/v1'
            logout:
                path: logout
                success_handler: OAT\SimpleRoster\Security\Handler\LogoutSuccessHandler
            json_login:
                check_path: login
                remember_me: false
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

            # NOTE: the built-in "logout" mechanism is not usable here because it intercepts the request at the very beginning so no authorization happens

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^%app.route_prefix%/v1/healthcheck', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^%app.route_prefix%/v1/lti/outcome', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^%app.route_prefix%/v1/lti1p3/outcome', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^%app.route_prefix%/v1', roles: ROLE_USER }
